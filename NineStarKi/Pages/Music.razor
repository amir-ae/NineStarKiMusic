@page "/{first:int}/Music/{second:int?}"
@using System.Text.Json;
@using Microsoft.Extensions.Caching.Distributed;

<h5 class=@($"text-center text-{(Suggestion ? "danger" : "brown")} m-2 p-2")>
    @Personality.Key.@Personality.Value
</h5>

@foreach (var occasion in Occasions)
{
    <MusicView Name=@occasion.Name Musicians=@MusiciansToShow(occasion) DataType=@DataType />
}

<div class="text-center m-2 p-2">
    <NavLink class="btn btn-secondary mx-1 px-2" href=@BackUrl>Back</NavLink>
    <button class="btn btn-primary mx-1 px-2" @onclick="HandleClick">@ButtonLabel</button>
</div>

@code {
    [Inject]
    public IRepository Repository { get; set; }

    [Inject]
    public IDistributedCache Cache { get; set; }

    [Inject]
    public Calculator Calculator { get; set; }

    [Parameter]
    public int First { get; set; }

    private int? second;
    [Parameter]
    public int? Second {
        get { return second; }
        set
        {
            second = value;
            Suggestion = value == null;
        }
    }

    public bool Suggestion { get; set; }

    public Personality Personality { get; set; }

    public IEnumerable<Musician> Musicians { get; set; }

    public IEnumerable<Occasion> Occasions { get; set; }

    public int DataType { get; set; } = 0;

    public string ButtonLabel { get; set; } = "Recordings";

    public string BackUrl => $"/{First}";

    public IEnumerable<Musician> MusiciansToShow(Occasion o)
    {
        var occasionMusicians = Musicians
            .Where(m => m.Occasions.Contains(o));
        var distinctMusicians = occasionMusicians
            .GroupBy(m => m.Name)
            .Select(g => g.First())
            .ToList();
        return DataType == 1 ? occasionMusicians : distinctMusicians;
    }

    protected override async Task OnParametersSetAsync()
    {
        Suggestion = Second == null;
        string number = (Suggestion ? First : Second).ToString();
        Personality = new Personality(number);
        List<Musician> allMusicians;
        List<Musician> selectedMusicians = new List<Musician>();
        bool EFRepository = typeof(EFRepository)
            .IsAssignableFrom(Repository.GetType());

        if (EFRepository)
        {
            string musiciansKey = $"musicians";
            string musiciansData = await Cache.GetStringAsync(musiciansKey);

            if (musiciansData == null)
            {
                allMusicians = Repository.Musicians.ToList();

                await Cache.SetStringAsync(musiciansKey, JsonSerializer.Serialize(allMusicians),
                    new DistributedCacheEntryOptions
                    {
                        AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10)
                    });
            }
            else
            {
                allMusicians = JsonSerializer.Deserialize<List<Musician>>(musiciansData);
            }
        }
        else
        {
            allMusicians = Repository.Musicians.ToList();
            foreach (Musician musician in allMusicians)
            {
                musician.Id = allMusicians.IndexOf(musician);
            }
        }

        if (Suggestion)
        {
            foreach (Musician musician in allMusicians)
            {
                if (Check(musician, Personality))
                {
                    selectedMusicians.Add(musician);
                }
            }
        }
        else
        {
            selectedMusicians = allMusicians
                .Where(m => m.Numbers.Contains(number)).ToList();
        }

        Musicians = Repository.GetRelated(selectedMusicians);

        Occasions = Musicians.SelectMany(m => m.Occasions).Distinct().OrderBy(o => o.Id);
    }

    private bool Check(Musician musician, Personality personality)
    {
        if (string.IsNullOrEmpty(musician.Numbers) || !musician.Numbers.Contains(',')
            || !musician.Numbers.Contains('&') && musician.Numbers.Count(f => f == ',') < 2)
        {
            return false;
        }

        String[] numbers = musician.Numbers
            .Replace(" & ", ", ")
            .Split(", ", StringSplitOptions.RemoveEmptyEntries);

        List<int> result = new List<int>(numbers.Length);

        foreach (string num in numbers)
        {
            if (num.Length == 1)
            {
                return false;
            }
            Personality p = new Personality(num);

            result.Add(Calculator.ProcessNumbers(personality, p));
        }

        return result.Average() > 50;
    }

    private void HandleClick()
    {
        switch (DataType)
        {
            case 0:
                DataType = 1;
                ButtonLabel = "Numbers";
                break;
            case 1:
                DataType = 2;
                ButtonLabel = "Genres";
                break;
            case 2:
                DataType = 0;
                ButtonLabel = "Recordings";
                break;
            default:
                DataType = 0;
                ButtonLabel = "Recordings";
                break;
        }
    }
}