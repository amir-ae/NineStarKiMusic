@page "/{id:int}/Music"
@inherits OwningComponentBase<IRepository>
@using static NineStarKi.Models.Calculator;
@using Microsoft.Extensions.Caching.Distributed;
@inject IDistributedCache cache;
@using System.Text.Json;

<h5 class="text-center text-primary m-2 p-2"> @Personality.Key.@Personality.Value </h5>
@foreach (var occasion in Occasions)
{
    <MusicView Name=@occasion.Name Musicians=@MusiciansToShow(occasion) DataType=@DataType />
}

<div class="text-center m-2 p-2">
    <NavLink class="btn btn-secondary mx-1 px-2" href=@($"/{Id}")>Back</NavLink>
    <button class="btn btn-primary mx-1 px-2" @onclick="HandleClick">@ButtonLabel</button>
</div>

@code {
    public IRepository Repository => Service;

    [Parameter]
    public int Id { get; set; }

    public Personality Personality { get; set; } = new Personality();

    public List<Musician> Musicians { get; set; } = new List<Musician>();

    public List<Occasion> Occasions { get; set; } = new List<Occasion>();

    public int DataType { get; set; } = 0;

    public string ButtonLabel { get; set; } = "Recordings";

    public List<Musician> MusiciansToShow(Occasion o)
    {
        var occasionMusicians = Musicians
            .FindAll(m => m.Occasions.Contains(o));
        var distinctMusicians = occasionMusicians
            .GroupBy(m => m.Name)
            .Select(g => g.First())
            .ToList();
        return DataType == 1 ? occasionMusicians : distinctMusicians;
    }

    protected async override void OnParametersSet()
    {
        string number = Id.ToString();
        Personality.Key = number[0];
        Personality.Value = $"{number[1]}.{number[2]}";

        List<Musician> AllMusicians = Repository.Musicians;

        foreach (Musician musician in AllMusicians)
        {
            if (Check(musician))
            {
                Musicians.Add(musician);
            }
        }

        // Cache some data from database
        if (!typeof(Repository).IsAssignableFrom(Repository.GetType()))
        {
            List<Genre> genres;
            List<Occasion> occasions;

            string genresKey = $"genres";
            string occasionsKey = $"occasions";

            string genresData = await cache.GetStringAsync(genresKey);
            string occasionsData = await cache.GetStringAsync(occasionsKey);

            if (genresData == null || occasionsData == null)
            {
                genres = Repository.Genres;
                occasions = Repository.Occasions;

                await cache.SetStringAsync(genresKey, JsonSerializer.Serialize(genres),
                    new DistributedCacheEntryOptions
                    {
                        AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10)
                    });
                await cache.SetStringAsync(occasionsKey, JsonSerializer.Serialize(occasions),
                    new DistributedCacheEntryOptions
                    {
                        AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10)
                    });
            }
            else
            {
                genres = JsonSerializer.Deserialize<List<Genre>>(genresData);
                occasions = JsonSerializer.Deserialize<List<Occasion>>(occasionsData);
            }
        }
        Occasions = Musicians.SelectMany(m => m.Occasions).Distinct().OrderBy(o => o.Id).ToList();
    }

    private bool Check(Musician musician)
    {
        if (string.IsNullOrEmpty(musician.Numbers) || !musician.Numbers.Contains(',')
            || !musician.Numbers.Contains('&') && musician.Numbers.Count(f => f == ',') < 2)
        {
            return false;
        }

        String[] numbers = musician.Numbers
            .Replace(" & ", ", ")
            .Split(", ", StringSplitOptions.RemoveEmptyEntries);

        List<int> result = new List<int>(numbers.Length);

        foreach (string num in numbers)
        {
            if (num.Length == 1)
            {
                return false;
            }
            Personality personality = new Personality();
            personality.Key = num[0];
            personality.Value = $"{num[1]}.{num[2]}";

            result.Add(ProcessNumbers(Personality, personality));
        }

        if (result.Average() > 50)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private void HandleClick()
    {
        switch (DataType)
        {
            case 0:
                DataType = 1;
                ButtonLabel = "Numbers";
                break;
            case 1:
                DataType = 2;
                ButtonLabel = "Genres";
                break;
            case 2:
                DataType = 0;
                ButtonLabel = "Recordings";
                break;
            default:
                DataType = 0;
                ButtonLabel = "Recordings";
                break;
        }
    }
}